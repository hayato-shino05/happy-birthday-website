// D·ªØ li·ªáu ng√†y sinh nh·∫≠t - s·∫Ω ƒë∆∞·ª£c t·∫£i t·ª´ Supabase
let birthdays = [];
let lastBirthdayCheck = null; // Th√™m bi·∫øn ƒë·ªÉ theo d√µi l·∫ßn ki·ªÉm tra cu·ªëi c√πng

// Th√™m CSS n·ªôi tuy·∫øn c·∫ßn thi·∫øt
const style = document.createElement('style');
style.textContent = `
    .countdown {
        transition: all 1s ease-in-out;
    }
    
    .birthday-title {
        font-family: 'Dancing Script', cursive;
        font-size: 3.5em;
        color: #ff6b81;
        text-shadow: 3px 3px 6px rgba(0,0,0,0.1);
        margin: 0;
        padding: 20px;
        animation: birthdayPop 1.5s ease-out;
    }
    
    @keyframes birthdayPop {
        0% { transform: scale(0); opacity: 0; }
        50% { transform: scale(1.2); }
        100% { transform: scale(1); opacity: 1; }
    }
    .photo-item {
        position: relative;
        overflow: hidden;
        cursor: pointer;
        transition: transform 0.3s ease;
    }
    
    .photo-item:hover {
        transform: scale(1.05);
    }
    
    .photo-item:hover .play-icon {
        opacity: 1;
    }
    
    .play-icon {
        opacity: 0.7;
        transition: opacity 0.3s ease;
    }
    
    video.memory-photo {
        object-fit: cover;
        width: 100%;
        height: 100%;
    }
`;

document.head.appendChild(style);

// T·∫£i danh s√°ch sinh nh·∫≠t t·ª´ Supabase
async function loadBirthdays() {
    try {
        // Ki·ªÉm tra xem ƒë√£ c√≥ k·∫øt n·ªëi Supabase ch∆∞a
        if (!supabase) {
            console.error("Supabase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o");
            return;
        }
        
        // L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng birthdays
        const { data, error } = await supabase
            .from('birthdays')
            .select('*')
            .order('month')
            .order('day');
            
        if (error) {
            console.error("L·ªói khi t·∫£i d·ªØ li·ªáu sinh nh·∫≠t:", error);
            return;
        }
        
        // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang ƒë·ªãnh d·∫°ng c·∫ßn thi·∫øt
        birthdays = data.map(item => ({
            name: item.name,
            month: item.month,
            day: item.day,
            year: item.year,
            message: item.message || `üéâ Ch√∫c m·ª´ng sinh nh·∫≠t ${item.name}! üéâ`
        }));
        
        // ƒê√£ t·∫£i danh s√°ch sinh nh·∫≠t t·ª´ Supabase
        
        // Sau khi t·∫£i xong, ki·ªÉm tra sinh nh·∫≠t
        checkBirthdayAndInitialize();
    } catch (error) {
        console.error("L·ªói khi t·∫£i sinh nh·∫≠t t·ª´ Supabase:", error);
    }
}

// Kh·ªüi t·∫°o trang khi t√†i li·ªáu s·∫µn s√†ng
document.addEventListener('DOMContentLoaded', () => {
    // T·∫£i danh s√°ch sinh nh·∫≠t t·ª´ Supabase khi trang ƒë√£ t·∫£i xong
    setTimeout(loadBirthdays, 1000); // Ch·ªù 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o Supabase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
});

// Ki·ªÉm tra xem c√≥ ph·∫£i ng√†y sinh nh·∫≠t kh√¥ng
function checkIfBirthday(date) {
    try {
        // Reset time to midnight
        const checkDate = new Date(date);
        checkDate.setHours(0, 0, 0, 0);
        
        return birthdays.find(person => {
            // So s√°nh th√°ng th·ª±c t·∫ø (1-12) v√† ng√†y
            const monthMatch = (checkDate.getMonth() + 1) === person.month;
            const dayMatch = checkDate.getDate() === person.day;
            
                    // Ki·ªÉm tra th√°ng v√† ng√†y
            
            return monthMatch && dayMatch;
        });
    } catch (error) {
        console.error('Error in checkIfBirthday:', error);
        return null;
    }
}

// T√¨m sinh nh·∫≠t ti·∫øp theo
function findNextBirthday(currentDate) {
    try {
        let nearestPerson = null;
        let nearestDate = null;
        let smallestDiff = Infinity;

        // T·∫°o m·ªôt b·∫£n sao c·ªßa m·∫£ng birthdays ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn m·∫£ng g·ªëc
        const birthdaysList = [...birthdays];

        for (const person of birthdaysList) {
            // T·∫°o ng√†y sinh nh·∫≠t cho nƒÉm hi·ªán t·∫°i
            let birthday = new Date(currentDate.getFullYear(), person.month - 1, person.day);
            
            // N·∫øu sinh nh·∫≠t nƒÉm nay ƒë√£ qua, t√≠nh cho nƒÉm sau
            if (currentDate > birthday) {
                birthday = new Date(currentDate.getFullYear() + 1, person.month - 1, person.day);
            }

            const diff = birthday - currentDate;
            // Ki·ªÉm tra ng√†y sinh nh·∫≠t k·∫ø ti·∫øp

            if (diff < smallestDiff && diff >= 0) {
                smallestDiff = diff;
                nearestDate = birthday;
                nearestPerson = person;
                // C·∫≠p nh·∫≠t ng∆∞·ªùi c√≥ ng√†y sinh nh·∫≠t g·∫ßn nh·∫•t
            }
        }

        // K·∫øt th√∫c t√¨m ki·∫øm
        return { person: nearestPerson, date: nearestDate };
    } catch (error) {
        console.error('Error finding next birthday:', error);
        return { person: null, date: null };
    }
}

// Hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c
function displayCountdown(targetDate, person) {
    try {
        const now = new Date();
        const diff = targetDate - now;
        
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((diff % (1000 * 60)) / 1000);

        const countdownElement = document.getElementById('countdown');
        if (countdownElement) {
            countdownElement.classList.remove('hidden');
            
            // Ki·ªÉm tra xem HTML hi·ªÉn th·ªã ƒë√£ t·ªìn t·∫°i ch∆∞a
            const titleElement = countdownElement.querySelector('h1');
            
            // N·∫øu ch∆∞a c√≥ HTML ho·∫∑c hi·ªÉn th·ªã ng∆∞·ªùi sinh nh·∫≠t kh√°c, t·∫°o m·ªõi to√†n b·ªô HTML
            if (!titleElement || titleElement.dataset.person !== person.name) {
                countdownElement.innerHTML = `
                    <h1 data-person="${person.name}">ƒê·∫øm Ng∆∞·ª£c ƒê·∫øn Sinh Nh·∫≠t ${person.name}</h1>
                    <div class="time">
                        <div>
                            <span id="days">${days}</span>
                            <div>Ng√†y</div>
                        </div>
                        <div>
                            <span id="hours">${hours}</span>
                            <div>Gi·ªù</div>
                        </div>
                        <div>
                            <span id="minutes">${minutes}</span>
                            <div>Ph√∫t</div>
                        </div>
                        <div>
                            <span id="seconds">${seconds}</span>
                            <div>Gi√¢y</div>
                        </div>
                    </div>
                `;
            } else {
                // N·∫øu ƒë√£ c√≥ HTML, ch·ªâ c·∫≠p nh·∫≠t c√°c s·ªë ƒë·∫øm ƒë·ªÉ tr√°nh b·ªã nh·∫£y
                const daysElement = countdownElement.querySelector('#days');
                const hoursElement = countdownElement.querySelector('#hours');
                const minutesElement = countdownElement.querySelector('#minutes');
                const secondsElement = countdownElement.querySelector('#seconds');
                
                if (daysElement) daysElement.textContent = days;
                if (hoursElement) hoursElement.textContent = hours;
                if (minutesElement) minutesElement.textContent = minutes;
                if (secondsElement) secondsElement.textContent = seconds;
            }
        }
    } catch (error) {
        console.error('Error displaying countdown:', error);
    }
}

// H√†m ki·ªÉm tra sinh nh·∫≠t v√† kh·ªüi t·∫°o
async function checkBirthdayAndInitialize() {
    try {
        const now = new Date();
        
        // Ki·ªÉm tra xem ƒë√£ qu√° 24 gi·ªù k·ªÉ t·ª´ l·∫ßn ki·ªÉm tra cu·ªëi c√πng hay ch∆∞a
        const lastCheck = localStorage.getItem('lastBirthdayCheck');
        const shouldCheck = !lastCheck || (now - new Date(lastCheck)) > (24 * 60 * 60 * 1000);
        
        // Ki·ªÉm tra c√≥ n√™n t·∫£i l·∫°i d·ªØ li·ªáu sinh nh·∫≠t kh√¥ng
        
        // N·∫øu danh s√°ch sinh nh·∫≠t r·ªóng ho·∫∑c ƒë√£ ƒë·∫øn th·ªùi gian ki·ªÉm tra l·∫°i
        if (birthdays.length === 0 || shouldCheck) {
            if (birthdays.length === 0) {
                await loadBirthdays();
                // N·∫øu v·∫´n kh√¥ng c√≥ d·ªØ li·ªáu, d·ª´ng x·ª≠ l√Ω
                if (birthdays.length === 0) {
                    console.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu sinh nh·∫≠t");
                    return;
                }
            }
            
            // C·∫≠p nh·∫≠t th·ªùi gian ki·ªÉm tra cu·ªëi c√πng
            localStorage.setItem('lastBirthdayCheck', now.toISOString());
            lastBirthdayCheck = now;
            
            const birthdayPerson = checkIfBirthday(now);

            // N·∫øu c√≥ sinh nh·∫≠t, kh·ªüi t·∫°o n·ªôi dung sinh nh·∫≠t
            if (birthdayPerson) {
                const today = `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;
                const lastShownDate = localStorage.getItem('lastBirthdayShown');
                
                // N·∫øu ch∆∞a hi·ªÉn th·ªã sinh nh·∫≠t h√¥m nay
                if (lastShownDate !== today) {
                    localStorage.setItem('lastBirthdayShown', today);
                    localStorage.setItem('currentBirthday', birthdayPerson.name);
                    localStorage.setItem('birthdayPerson', birthdayPerson.name); // Th√™m cho c√°c ch·ª©c nƒÉng kh√°c
                    showBirthdayContent(birthdayPerson);
                }
            } else {
                // X√≥a d·ªØ li·ªáu sinh nh·∫≠t c≈©
                localStorage.removeItem('lastBirthdayShown');
                localStorage.removeItem('currentBirthday');
                
                // Kh·ªüi t·∫°o ƒë·∫øm ng∆∞·ª£c
                const nextBirthday = findNextBirthday(new Date());
                if (nextBirthday.person) {
                    // L∆∞u th√¥ng tin sinh nh·∫≠t k·∫ø ti·∫øp ƒë·ªÉ s·ª≠ d·ª•ng trong ƒë·∫øm ng∆∞·ª£c
                    localStorage.setItem('nextBirthdayDate', nextBirthday.date.toISOString());
                    localStorage.setItem('nextBirthdayPerson', JSON.stringify(nextBirthday.person));
                    displayCountdown(nextBirthday.date, nextBirthday.person);
                }
            }
        } else {
            // Ch·ªâ c·∫≠p nh·∫≠t ƒë·∫øm ng∆∞·ª£c t·ª´ d·ªØ li·ªáu ƒë√£ l∆∞u, kh√¥ng ki·ªÉm tra l·∫°i
            const nextBirthdayDateStr = localStorage.getItem('nextBirthdayDate');
            const nextBirthdayPersonStr = localStorage.getItem('nextBirthdayPerson');
            
            if (nextBirthdayDateStr && nextBirthdayPersonStr) {
                const nextBirthdayDate = new Date(nextBirthdayDateStr);
                const nextBirthdayPerson = JSON.parse(nextBirthdayPersonStr);
                displayCountdown(nextBirthdayDate, nextBirthdayPerson);
            }
        }
    } catch (error) {
        console.error('Error in checkBirthdayAndInitialize:', error);
    }
}

// C·∫≠p nh·∫≠t th·ªùi gian ƒë·∫øm ng∆∞·ª£c (ch·∫°y m·ªói gi√¢y)
function updateCountdownTime() {
    try {
        // L·∫•y th√¥ng tin sinh nh·∫≠t ti·∫øp theo t·ª´ localStorage
        const nextBirthdayDateStr = localStorage.getItem('nextBirthdayDate');
        const nextBirthdayPersonStr = localStorage.getItem('nextBirthdayPerson');
        
        if (!nextBirthdayDateStr || !nextBirthdayPersonStr) {
            // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, ch·∫°y l·∫°i h√†m kh·ªüi t·∫°o m·ªôt l·∫ßn
            checkBirthdayAndInitialize();
            return;
        }
        
        const nextBirthdayDate = new Date(nextBirthdayDateStr);
        const nextBirthdayPerson = JSON.parse(nextBirthdayPersonStr);
        
        // Ch·ªâ c·∫≠p nh·∫≠t b·ªô ƒë·∫øm th·ªùi gian, kh√¥ng ki·ªÉm tra l·∫°i ng√†y sinh nh·∫≠t
        displayCountdown(nextBirthdayDate, nextBirthdayPerson);
    } catch (error) {
        console.error('Error in updateCountdownTime:', error);
    }
}

// Hi·ªÉn th·ªã n·ªôi dung sinh nh·∫≠t
function showBirthdayContent(birthdayPerson) {
    const countdownElement = document.getElementById('countdown');
    if (countdownElement) {
        countdownElement.classList.add('hidden');
    }

    const birthdayContent = document.getElementById('birthdayContent');
    if (birthdayContent) {
        birthdayContent.classList.remove('hidden');
        birthdayContent.classList.add('appearing');
        
        // X√≥a l·ªõp animation sau khi n√≥ ho√†n th√†nh
        setTimeout(() => {
            birthdayContent.classList.remove('appearing');
        }, 1000);
    }

    const birthdayTitle = document.getElementById('birthdayTitle');
    if (birthdayTitle) {
        birthdayTitle.style.display = 'block';
        birthdayTitle.style.opacity = '1';
        birthdayTitle.classList.add('birthday-title');
        birthdayTitle.textContent = 'Ch√∫c M·ª´ng Sinh Nh·∫≠t';
    }

    const birthdayMessage = document.getElementById('birthdayMessage');
    if (birthdayMessage) {
        birthdayMessage.textContent = birthdayPerson.message;
        birthdayMessage.style.display = 'block';
        birthdayMessage.style.opacity = '1';
        birthdayMessage.style.transform = 'translateY(0)';
        birthdayMessage.classList.add('celebrating');
    }

    // Hi·ªÉn th·ªã b√°nh 2D
    const cake2DContainer = document.querySelector('.cake-2d-container');
    if (cake2DContainer) {
        cake2DContainer.style.display = 'flex';
    }
    
    // Hi·ªán n√∫t th·ªïi n·∫øn v·ªõi hi·ªáu ·ª©ng sau khi b√°nh ƒë√£ hi·ªÉn th·ªã
    setTimeout(() => {
        const blowButton = document.getElementById('blowButton');
        if (blowButton) {
            blowButton.style.display = 'block';
            blowButton.style.opacity = '0';
            blowButton.style.transform = 'translateY(20px)';
            
            // Hi·ªáu ·ª©ng hi·ªán d·∫ßn
            setTimeout(() => {
                blowButton.style.transition = 'all 0.5s ease';
                blowButton.style.opacity = '1';
                blowButton.style.transform = 'translateY(0)';
            }, 100);
            
            // G·∫Øn s·ª± ki·ªán cho n√∫t th·ªïi n·∫øn - Ch·ªâ c·∫ßn nh·∫•n n√∫t l√† th·ªïi t·∫Øt
            blowButton.onclick = function() {
                // G·ªçi tr·ª±c ti·∫øp h√†m th·ªïi t·∫Øt n·∫øn khi nh·∫•n n√∫t
                if (typeof blowOutCandle === 'function') {
                    blowOutCandle();
                } else {
                    // X·ª≠ l√Ω th·ªïi n·∫øn khi kh√¥ng c√≥ h√†m blowOutCandle
                    // Fallback n·∫øu kh√¥ng t√¨m th·∫•y h√†m
                    const flames = document.querySelectorAll('.flame');
                    if (flames && flames.length > 0) {
                        flames.forEach((flame, index) => {
                            setTimeout(() => {
                                flame.style.opacity = '0';
                            }, index * 200);
                        });
                    }
                }
            };
        }
    }, 1000);
    
    // ·∫®n n√∫t c·∫•p quy·ªÅn microphone v√¨ kh√¥ng c·∫ßn thi·∫øt
    const micPermissionBtn = document.getElementById('micPermissionBtn');
    if (micPermissionBtn) {
        micPermissionBtn.style.display = 'none';
    }
    
    // ·∫®n b√°nh 3D v√† hi·ªÉn th·ªã b√°nh 2D
    const cakeContainer = document.querySelector('.cake-container');
    if (cakeContainer) {
        cakeContainer.style.display = 'none';
    }
    
    const birthdayMessageContainer = document.querySelector('.birthday-message');
    if (birthdayMessageContainer) {
        birthdayMessageContainer.style.display = 'block';
    }

    // Thay ƒë·ªïi n·ªÅn trang v·ªõi hi·ªáu ·ª©ng
    document.body.style.transition = 'background 1.5s ease';
    document.body.style.background = 'linear-gradient(135deg, #ffe6eb 0%, #ffb8c6 100%)';

    // T·∫°o hi·ªáu ·ª©ng confetti r∆°i xu·ªëng
    setTimeout(() => {
    createConfetti();
        
        // Th√™m ƒë·ª£t confetti th·ª© hai sau v√†i gi√¢y
        setTimeout(createConfetti, 2000);
    }, 500);

    // Ph√°t nh·∫°c sinh nh·∫≠t v·ªõi ƒë·ªô tr·ªÖ nh·ªè
    setTimeout(playBirthdayMusic, 1200);
    
    // Hi·ªÉn th·ªã l·ªùi ch√∫c c√° nh√¢n h√≥a n·∫øu c√≥
    setTimeout(displaySavedCustomMessage, 1500);
    
    // Th√™m hi·ªáu ·ª©ng b√≥ng bay
    if (typeof createBalloons === 'function') {
        setTimeout(createBalloons, 1000);
    }
}

// H√†m kh·ªüi t·∫°o b√°nh sinh nh·∫≠t 3D
function init3DCake() {
    // B√°nh 3D ƒë√£ b·ªã v√¥ hi·ªáu h√≥a, ch·ªâ s·ª≠ d·ª•ng b√°nh 2D
    return;
}

// Th√™m trang tr√≠ cho b√°nh
function addCakeTierDecorations(tier, radius, height, color) {
    // ƒê√£ b·ªã v√¥ hi·ªáu h√≥a v√¨ kh√¥ng c√≤n d√πng b√°nh 3D
    return;
}

// Th√™m ch·ªØ Happy Birthday l√™n b√°nh
function addBirthdayText(cakeGroup) {
    // ƒê√£ v√¥ hi·ªáu h√≥a ch·ª©c nƒÉng hi·ªÉn th·ªã ch·ªØ "Ch√∫c M·ª´ng Sinh Nh·∫≠t"
    return; // Kh√¥ng th√™m ch·ªØ v√†o b√°nh n·ªØa
}

// T√≠nh nƒÉng t·∫£i Three.js n·∫øu ch∆∞a c√≥
function loadThreeJS(callback) {
    // ƒê√£ b·ªã v√¥ hi·ªáu h√≥a v√¨ kh√¥ng c√≤n d√πng b√°nh 3D
    if (callback) callback();
    return;
}

// Ph√°t nh·∫°c sinh nh·∫≠t
function playBirthdayMusic() {
    const audio = new Audio('happy-birthday.mp3');
    audio.play().catch(e => {
        // Auto-play b·ªã ngƒÉn ch·∫∑n b·ªüi tr√¨nh duy·ªát
        const playButton = document.getElementById('playMusic');
        if (playButton) {
            playButton.textContent = '‚ñ∂Ô∏è';
        }
    });
}

// Debug function
function debugDate() {
    const now = new Date();
    // H√†m debug - kh√¥ng s·ª≠ d·ª•ng trong production
}

// Kh·ªüi t·∫°o trang
document.addEventListener('DOMContentLoaded', function() {
    // Ki·ªÉm tra sinh nh·∫≠t m·ªôt l·∫ßn khi t·∫£i trang
    checkBirthdayAndInitialize();
    
    // C·∫≠p nh·∫≠t ƒë·∫øm ng∆∞·ª£c m·ªói gi√¢y (kh√¥ng ki·ªÉm tra l·∫°i ng√†y sinh nh·∫≠t)
    setInterval(updateCountdownTime, 1000);
    
    // Kh·ªüi t·∫°o c√°c t√≠nh nƒÉng kh√°c
    initPhotoAlbum();
    initGames();
    initSocialShare();
    initMusicPlayer();
    
    // √Åp d·ª•ng giao di·ªán theo m√πa v√† l·ªÖ h·ªôi
    const theme = detectSeasonAndFestival();
    applyTheme(theme);
    
    // √Åp d·ª•ng ng√¥n ng·ªØ
    const savedLang = localStorage.getItem('language') || 'vi';
    document.getElementById('languageSelect').value = savedLang;
    applyLanguage(savedLang);
    
    // Kh·ªüi t·∫°o t√≠nh nƒÉng l·ªùi ch√∫c c√° nh√¢n h√≥a
    initCustomMessage();
    displaySavedCustomMessage();
    
    // Debug v·ªõi s·ªë l∆∞·ª£ng log th·∫•p h∆°n
    // debugDate();
}); 